---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-local-etc-volume
  labels:
    directory: etc
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local
  hostPath:
    path: "/home/pi/pihole"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-local-etc-claim
spec:
  storageClassName: local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      directory: etc
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-local-dnsmasq-volume
  labels:
    directory: dnsmasq.d
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local
  hostPath:
    path: "/home/pi/dns"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-local-dnsmasq-claim
spec:
  storageClassName: local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
  selector:
    matchLabels:
      directory: dnsmasq.d
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
  name: pihole-udp
spec:
  type: LoadBalancer
  ports:
    - protocol: UDP
      port: 53
      name: dns-udp
  selector:
    tier: app2
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
  name: pihole
spec:
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 80
      name: admin
    - protocol: TCP
      name: dns-tcp
      port: 53
  selector:
    tier: app2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  labels:
    app: pihole
    tier: app2
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: app2
  template:
    metadata:
      labels:
        app: pihole
        tier: app2
    spec:
      containers:
        - name: pihole
          image: pihole/pihole:latest
          imagePullPolicy: "Always"
          ports:
            - containerPort: 80
              protocol: TCP
            - containerPort: 53
              protocol: UDP
            - containerPort: 53
              protocol: TCP
          env:
            - name: TZ
              value: "America/New_York"
            - name: WEBPASSWORD
              value: "..."
          volumeMounts:
            - name: pihole-local-etc-volume
              mountPath: "/etc/pihole"
            - name: pihole-local-dnsmasq-volume
              mountPath: "/etc/dnsmasq.d"
      volumes:
        - name: pihole-local-etc-volume
          persistentVolumeClaim:
            claimName: pihole-local-etc-claim
        - name: pihole-local-dnsmasq-volume
          persistentVolumeClaim:
            claimName: pihole-local-dnsmasq-claim
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ha-ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pihole
                port:
                  number: 53
